__author__ = 'Смелова Анна Алексеевна'
# easy

# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.

# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2.  банан
# 3.   киви
# 4.  арбуз

# Подсказка: воспользоваться методом .format()

list = ["яблоко", "банан", "киви", "грейпфрут", "арбуз", "апельсин"]
max_len = 0
for fruit in list:
    fruit_len = len(fruit)
    if max_len < fruit_len:
        max_len = fruit_len
str_format = '{:>' + str(max_len) + '}'
for i in range(len(list)):
    print(str(i + 1)+'. ' + str_format.format(list[i]))

# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.

list1 = [9, 100, 101, 20, 2, 8, 7, 5, 7, 2, 9, 4]
list2 = [20, 11, 9, 20, 100, 6, 20]

print(list1)
print(list2)

elem_to_del = []
for k in list1:
    if k in list2:
        elem_to_del.append(k)
for d in elem_to_del:
    list1.pop(list1.index(d))

print(list1)


# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.

list = [9, 100, 101, 20, 2, 8, 7, 5, 7, 2, 9, 4]

print(list)

new_list = []
for k in list:
    if k % 2 == 0:
        new_list.append(k / 4)
    else:
        new_list.append(k * 2)

print(new_list)

# normal

# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

list = [2, -5, 8, 9, -25, 25, 4]

print(list)

new_list = []
for k in list:
    if k > 0:
        k_sqr = k ** 0.5
        if (k_sqr).is_integer():
            new_list.append(int(k_sqr))

print(new_list)

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

date = '02.11.2013'
day = date[:2]
month = date[3:5]
year = date[6:]

day_dict = {'01': 'первое', '02': 'второе', '03': 'третье', '04': 'четвертое', '05': 'пятое', '06': 'шестое',
            '07': 'седьмое', '08': 'восьмое', '09': 'девятое', '10': 'десятое', '11': 'одиннадцатое',
            '12': 'двенадцатое', '13': 'тринадцатое', '14': 'четырнадцатое', '15': 'пятнадцатое', '16': 'шестнадцатое',
            '17': 'семнадцатое', '18': 'восемнадцатое', '19': 'девятнадцатое', '20': 'двадцатое',
            '21': 'двадцать первое', '22': 'двадцать второе', '23': 'двадцать третье', '24': 'двадцать четвертое',
            '25': 'двадцать пятое', '26': 'двадцать шестое', '27': 'двадцать седьмое', '28': 'двадцать восьмое',
            '29': 'двадцать девятое', '30': 'тридцатое', '31': 'тридцать первое'}
month_dict = {'01': 'января', '02': 'февраля', '03': 'марта', '04': 'апреля','05': 'мая', '06': 'июня', '07': 'июля',
              '08': 'августа', '09': 'сентября', '10': 'октября', '11': 'ноября', '12': 'декабря'}

result = day_dict[day] + ' ' + month_dict[month] + ' ' + year + ' года'
print(result)

# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

import random

n = int(input("Укажите длину списка: "))
lng = n
list = []
for i in range(lng):
    list.append(random.randint(-100,100))

print(list)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

list = [1, 2, 4, 5, 6, 2, 5, 2]

list_a = []
for k in set(list):
    list_a.append(k)
print(list_a)

list_b = []
dict = {}
for m in list:
    if m in dict.keys():
        dict[m] = dict[m] + 1
    else:
        dict[m] = 1
for key, value in dict.items():
    if value == 1:
        list_b.append(key)
print(list_b)

# hard

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y
k_start = equation.index('=') + 2
k_end = equation.index('x')
k = float(equation[k_start:k_end])

b_start = equation.index('+') + 2
b = float(equation[b_start:])

y = k * x + b
print(y)

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'

date = '01.01.1985'

date_ok = False
# Сначала проверим формат строки
if len(date) == 10:
    if date[2] == '.' and date[5] == '.':
        if date[:2].isnumeric() and date[3:5].isnumeric() and date[6:].isnumeric():
            # Проверим корректность месяца
            month = int(date[3:5])
            if 1 <= month <= 12:
                # Проверим корректность дня
                day = int(date[:2])
                limit = 30
                if day % 2 == 1:
                    limit = 31
                if 1 <= day <= limit:
                    # Проверим корректность года
                    year = int(date[6:])
                    if 1 <= year <= 9999:
                        date_ok = True
if date_ok:
    print('Дата указана корректно')
else:
    print('Дата указана некорректно')

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

# Решение №1 "В лоб"
# Проходим все комнаты снизу вверх, пока не дойдем до нужной
# При прохождении фиксируем этаж и позицию

N = 11  # номер искомой комнаты
level = 0  # уровень, определяющий кол-во комнат на этаже
floor = 0  # номер этажа
room = 0  # текущая комната
go = True  # маркер остановки поиска
while go:
    for j in range(level):  # идем по этажам уровня
        if go:
            floor = floor + 1
            pos = 0  # порядковый номер слева на этаже
            for g in range(level):  # идем по комнатам на этаже
                pos = pos + 1
                room = room + 1
                if room == N:
                    go = False
                    print(str(floor) + ' ' + str(pos))
                    break
        else:
            break
    level = level + 1


# Решение №2 "Работает намного быстрее :)"
# Проходим также снизу вверх, но по уровням
# По найденному уровню определяем этаж и позицию нужной комнаты
# last_room - последняя комната на уровне определяется уравнением Σn²=level*(level+1)(2*level+1)/6
# last_floor - последний этаж на уровне определяется уравнением Σn = level*(level+1)/2

N = 11  # номер искомой комнаты
level = 1  # уровень, определяющий кол-во комнат на этаже
go = True  # маркер остановки поиска
while go:  # Идем по уровням, пока не достигнем искомой комнаты
    last_room = int(level * (level + 1) * (2 * level + 1) / 6)  # последняя комната на уровне
    if last_room >= N:
        last_floor = int(level * (level + 1) / 2)  # последний этаж на уровне
        floor = last_floor - ((last_room - N) // level)  # номер искомого этажа
        pos = level - ((last_room - N) % level)  # порядковый номер искомой комнаты слева на этаже
        print(floor, pos)
        go = False
    level = level + 1
